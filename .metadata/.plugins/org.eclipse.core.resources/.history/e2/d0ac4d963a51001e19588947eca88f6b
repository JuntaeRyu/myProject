package com.spring.biz.comments;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

@Repository("commentDAO")
public class CommentsDAO2 {
	// SQL 쿼리문
	   private final String sql_INSERT = "INSERT INTO COMMENTS (COMMENTSNUM, COMMENTS, BOARDNUM, MEMBERID) VALUES ((SELECT NVL(MAX(COMMENTSNUM),19999)+1 FROM COMMENTS),?, ?, ?)";
	   private final String sql_SELECTALL = "SELECT C.COMMENTSNUM, C.COMMENTS, C.BOARDNUM, C.MEMBERID, C.PROHIBITCNT, M.NICKNAME,C.COMMENTSDATE FROM COMMENTS C LEFT JOIN MEMBER M ON C.MEMBERID=M.MEMBERID ORDER BY C.COMMENTSNUM DESC";
	   private final String sql_SELECTONE = "SELECT C.COMMENTSNUM, C.COMMENTS, C.BOARDNUM, C.MEMBERID, C.PROHIBITCNT, M.NICKNAME,C.COMMENTSDATE FROM COMMENTS C LEFT JOIN MEMBER M ON C.MEMBERID=M.MEMBERID WHERE C.COMMENTSNUM=?";
	   private final String sql_UPDATE_COMMENTS = "UPDATE COMMENTS SET COMMENTS=? WHERE COMMENTSNUM=?";
	   private final String sql_UPDATE_PROHIBIT = "UPDATE COMMENTS SET PROHIBITCNT=(SELECT COUNT(CASE WHEN NUM=? THEN 1 END ) FROM PROHIBIT) WHERE COMMENTSNUM=?";
	   private final String sql_DELETE = "DELETE FROM COMMENTS WHERE COMMENTSNUM=?";
	// JDBC(자바 데이터베이스 커넥트) 도구
	
	@Autowired
	private JdbcTemplate jdbcTemplate;

	public CommentsDAO2() {

	}
	public boolean insert(CommentsVO cVO) { 
		System.out.println("CommentDAO2 로그 insert 메서드");
		int rs = jdbcTemplate.update(sql_INSERT,cVO.getComments(),cVO.getBoardNum(),cVO.getMemberID());
		if (rs <= 0) {
			return false;
		}
		return true;
	}

	public List<CommentsVO> selectAll(CommentsVO cVO) { // 목록 검색
		System.out.println("CommentDAO2 로그 selectAll 메서드");
		return jdbcTemplate.query(sql_SELECTALL, new CommentsRowMapper());
	}

	public CommentsVO selectOne(CommentsVO cVO) {
		System.out.println("CommentDAO2 로그 selectOne 메서드");
		Object[] args= {cVO.getCommentsNum()};
		return jdbcTemplate.queryForObject(sql_SELECTONE, args, new CommentsRowMapper());
	}

	public boolean update(CommentsVO cVO) {
		System.out.println("CommentDAO2 로그 update 메서드");
		int rs=0;
		if(cVO.getSearchCondition().equals("updateComments")) {
			rs=jdbcTemplate.update(sql_UPDATE_COMMENTS, cVO.getComments(), cVO.getCommentsNum());

		}
		else if(cVO.getSearchCondition().equals("prohibit")) {
			rs=jdbcTemplate.update(sql_UPDATE_PROHIBIT, cVO.getCommentsNum(), cVO.getCommentsNum());
		}
		if (rs <= 0) {
			return false;
		}
		return true;
	}

	public boolean delete(CommentsVO cVO) {
		System.out.println("CommentDAO2 로그 delete 메서드");
		int rs=jdbcTemplate.update(sql_DELETE, cVO.getCommentsNum());
		if (rs <= 0) {
			return false;
		}
		return true;
	}
}

//SELECT C.COMMENTNUM, C.COMMENT, C.BOARDNUM, C.MEMBERID, C.PROHIBITCNT, M.NICKNAME 
//FROM COMMENT C LEFT JOIN MEMBER M ON C.MEMBERID=M.MEMBERID ORDER BY C.COMMENTNUM DESC

class CommentsRowMapper implements RowMapper<CommentsVO>{

	@Override
	public CommentsVO mapRow(ResultSet rs, int rowNum) throws SQLException {
		CommentsVO cdata=new CommentsVO();
		cdata.setCommentsNum(rs.getInt("COMMENTSNUM"));
		cdata.setComments(rs.getString("COMMENTS"));
		cdata.setBoardNum(rs.getInt("BOARDNUM"));
		cdata.setMemberID(rs.getString("MEMBERID"));
		cdata.setProhibitCnt(rs.getInt("PROHIBITCNT"));
		cdata.setNickName(rs.getString("NICKNAME"));
		cdata.setCommentsDate(rs.getString("COMMENTSDATE"));

		
		return cdata;
	}


}
