package com.spring.biz.reply;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

@Repository("replyDAO")
public class ReplyDAO2 {
	// SQL 쿼리문
	private final String sql_INSERT = "INSERT INTO REPLY (REPLYNUM, REPLY, COMMENTSNUM, MEMBERID, REPLYDATE) VALUES ((SELECT NVL(MAX(REPLYNUM),29999)+1 FROM REPLY),?, ?, ?, SYSTIMESTAMP)";
	private final String sql_SELECTALL = "SELECT R.REPLYNUM, R.REPLY, R.COMMENTSNUM, R.MEMBERID, R.PROHIBITCNT, R.REPLYDATE, M.NICKNAME FROM REPLY R LEFT JOIN MEMBER M ON R.MEMBERID=M.MEMBERID ORDER BY R.REPLYNUM ASC";
	private final String sql_SELECTALL_COMMENTNUM = "SELECT R.REPLYNUM, R.REPLY, R.COMMENTSNUM, R.MEMBERID, R.PROHIBITCNT, R.REPLYDATE, M.NICKNAME FROM REPLY R LEFT JOIN MEMBER M ON R.MEMBERID=M.MEMBERID WHERE COMMENTSNUM=?";
	private final String sql_SELECTONE = "SELECT R.REPLYNUM, R.REPLY, R.COMMENTSNUM, R.MEMBERID, R.PROHIBITCNT, R.REPLYDATE, M.NICKNAME FROM REPLY R LEFT JOIN MEMBER M ON R.MEMBERID=M.MEMBERID WHERE R.REPLYNUM=?";
	private final String sql_UPDATE_REPLY = "UPDATE REPLY SET REPLY=? WHERE REPLYNUM=?";
	private final String sql_UPDATE_PROHIBIT = "UPDATE REPLY SET PROHIBITCNT=(SELECT COUNT(CASE WHEN NUM=? THEN 1 END ) FROM PROHIBIT) WHERE REPLYNUM=?";
	private final String sql_DELETE = "DELETE FROM REPLY WHERE REPLYNUM=?";

	// JDBC(자바 데이터베이스 커넥트) 도구
	@Autowired
	JdbcTemplate jdbcTemplate;

	public boolean insert(ReplyVO rVO) { // DB에 객체정보 저장

		// 쿼리문 수정 및 실행 후 결과를 저장
		int result = jdbcTemplate.update(sql_INSERT, rVO.getReply(), rVO.getCommentsNum(), rVO.getMemberID());

		// 검색 결과 리턴
		if (result <=0) {
			return false;
		}
		return true;
	} // insert

	public List<ReplyVO> selectAll(ReplyVO rVO) { // 목록 검색

		// SQL 쿼리문 입력
		if (rVO.getSearchCondition() != null) {
			if (rVO.getSearchCondition().equals("전체출력")) {
				// 쿼리문 수정 및 실행 후 결과 리턴
				return jdbcTemplate.query(sql_SELECTALL, new ReplyRowMapper());
			} else if (rVO.getSearchCondition().equals("댓글번호")) {
				// 쿼리문 수정할 정보 저장
				Object[] args = { rVO.getCommentsNum() };

				// 쿼리문 수정 및 실행 후 결과 리턴
				return jdbcTemplate.query(sql_SELECTALL_COMMENTNUM, args, new ReplyRowMapper());
			}
		}

		return null;

	}

	public ReplyVO selectOne(ReplyVO rVO) { // 하나의 객체 정보 검색

		// 쿼리문 수정할 정보 저장
		Object[] args = { rVO.getReplyNum() };

		// 쿼리문 수정 및 실행 후 결과 리턴
		return jdbcTemplate.queryForObject(sql_SELECTONE, args, new ReplyRowMapper());
	}

	public boolean update(ReplyVO rVO) {

		int result = 0;

		// SQL 쿼리문 입력
		
		if (rVO.getSearchCondition().equals("대댓글수정")) {
			// 쿼리문 수정 및 실행 후 결과를 저장
			result = jdbcTemplate.update(sql_UPDATE_REPLY, rVO.getReply(), rVO.getReplyNum());
		} else if (rVO.getSearchCondition().equals("신고")) {
			// 쿼리문 수정 및 실행 후 결과를 저장
			result = jdbcTemplate.update(sql_UPDATE_PROHIBIT, rVO.getReplyNum(), rVO.getReplyNum());
		}

		// 검색 결과 리턴
		if (result <=0) {
			return false;
		}
		return true;
	}

	public boolean delete(ReplyVO rVO) {

		// 쿼리문 수정 및 실행 후 결과를 저장
		int result = jdbcTemplate.update(sql_DELETE, rVO.getReplyNum());

		// 성공 리턴
		if (result <=0) {
			return false;
		}
		return true;
	}
}

class ReplyRowMapper implements RowMapper<ReplyVO> {

	@Override
	public ReplyVO mapRow(ResultSet rs, int rowNum) throws SQLException {

		ReplyVO rdata = new ReplyVO();

		rdata.setReplyNum(rs.getInt("REPLYNUM"));
		rdata.setReply(rs.getString("REPLY"));
		rdata.setCommentsNum(rs.getInt("COMMENTSNUM"));
		rdata.setMemberID(rs.getString("MEMBERID"));
		rdata.setProhibitCnt(rs.getInt("PROHIBITCNT"));
		rdata.setReplyDate(rs.getString("REPLYDATE"));
		rdata.setNickName(rs.getString("NICKNAME"));

		return rdata;
	}

}
