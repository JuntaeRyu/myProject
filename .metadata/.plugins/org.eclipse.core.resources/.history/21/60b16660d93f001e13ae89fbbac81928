package com.spring.biz.comments;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

@Repository("commentDAO")
public class CommentsDAO2 {
	// SQL 쿼리문
	private final String sql_INSERT = "INSERT INTO COMMENT (COMMENTNUM, COMMENT, BOARDNUM, MID) VALUES ((SELECT NVL(MAX(COMMENTNUM),19999)+1 FROM COMMENT),?, ?, ?)";
	private final String sql_SELECTALL = "SELECT C.COMMENTNUM, C.COMMENT, C.BOARDNUM, C.MID, C.PROHIBITCNT, M.NICKNAME FROM COMMENT C LEFT JOIN MEMBER M ON C.MID=M.MID ORDER BY C.COMMENTNUM DESC";
	private final String sql_SELECTONE = "SELECT C.COMMENTNUM, C.COMMENT, C.BOARDNUM, C.MID, C.PROHIBITCNT, M.NICKNAME FROM COMMENT C LEFT JOIN MEMBER M ON C.MID=M.MID WHERE C.COMMENTNUM=?";
	private final String sql_UPDATE_COMMENT = "UPDATE COMMENT SET COMMENT=? WHERE COMMENTNUM=?";
	private final String sql_UPDATE_PROHIBIT = "UPDATE COMMENT SET PROHIBITCNT=(SELECT COUNT(CASE WHEN NUM=? THEN 1 END ) FROM PROHIBIT) WHERE COMMENTNUM=?";
	private final String sql_DELETE = "DELETE FROM COMMENT WHERE COMMENTNUM=?";
	// JDBC(자바 데이터베이스 커넥트) 도구
	
	@Autowired
	private JdbcTemplate jdbcTemplate;

	public CommentsDAO2() {

	}
	public boolean insert(CommentsVO cVO) { 
		System.out.println("CommentDAO2 로그 insert 메서드");
		int rs = jdbcTemplate.update(sql_INSERT,cVO.getComments(),cVO.getBoardNum(),cVO.getMid());
		if (rs <= 0) {
			return false;
		}
		return true;
	}

	public List<CommentsVO> selectAll(CommentsVO cVO) { // 목록 검색
		System.out.println("CommentDAO2 로그 selectAll 메서드");
		return jdbcTemplate.query(sql_SELECTALL, new CommentRowMapper());
	}

	public CommentsVO selectOne(CommentsVO cVO) {
		System.out.println("CommentDAO2 로그 selectOne 메서드");
		Object[] args= {cVO.getCommentsNum()};
		return jdbcTemplate.queryForObject(sql_SELECTONE, args, new CommentRowMapper());
	}

	public boolean update(CommentsVO cVO) {
		System.out.println("CommentDAO2 로그 update 메서드");
		int rs=0;
		if(cVO.getSelect().equals("댓글수정")) {
			rs=jdbcTemplate.update(sql_UPDATE_COMMENT, cVO.getComments(), cVO.getCommentsNum());

		}
		else if(cVO.getSelect().equals("신고")) {
			rs=jdbcTemplate.update(sql_UPDATE_PROHIBIT, cVO.getCommentsNum(), cVO.getCommentsNum());
		}
		if (rs <= 0) {
			return false;
		}
		return true;
	}

	public boolean delete(CommentsVO cVO) {
		System.out.println("CommentDAO2 로그 delete 메서드");
		int rs=jdbcTemplate.update(sql_DELETE, cVO.getCommentsNum());
		if (rs <= 0) {
			return false;
		}
		return true;
	}
}

//SELECT C.COMMENTNUM, C.COMMENT, C.BOARDNUM, C.MID, C.PROHIBITCNT, M.NICKNAME 
//FROM COMMENT C LEFT JOIN MEMBER M ON C.MID=M.MID ORDER BY C.COMMENTNUM DESC

class CommentRowMapper implements RowMapper<CommentsVO>{

	@Override
	public CommentsVO mapRow(ResultSet rs, int rowNum) throws SQLException {
		CommentsVO cdata=new CommentsVO();
		cdata.setCommentsNum(rs.getInt("COMMENTSNUM"));
		cdata.setComments(rs.getString("COMMENTS"));
		cdata.setBoardNum(rs.getInt("BOARDNUM"));
		cdata.setMid(rs.getString("MID"));
		cdata.setProhibitCnt(rs.getInt("PROHIBITCNT"));
		cdata.setNickName(rs.getString("NICKNAME"));

		return cdata;
	}


}
